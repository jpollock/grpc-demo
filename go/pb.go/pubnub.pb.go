// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pubnub.proto

package pubnub

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Channel              string         `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	Data                 *_struct.Value `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_b136b01356d0392d, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Message) GetData() *_struct.Value {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "pubnub.Message")
}

func init() { proto.RegisterFile("pubnub.proto", fileDescriptor_b136b01356d0392d) }

var fileDescriptor_b136b01356d0392d = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x8f, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0x37, 0x22, 0x2d, 0x1b, 0x05, 0x65, 0x10, 0x2d, 0xc5, 0xc3, 0xd2, 0x53, 0xf1, 0x90,
	0x5d, 0x56, 0xf4, 0x01, 0xbc, 0x8b, 0x4b, 0x0b, 0xde, 0x33, 0x75, 0x6c, 0x0b, 0x35, 0x09, 0x4d,
	0xe6, 0xe0, 0xb3, 0xf9, 0x72, 0x42, 0x9b, 0x5c, 0x3c, 0x7a, 0x9c, 0x8f, 0xef, 0xcf, 0x47, 0xe4,
	0xa5, 0x63, 0x34, 0x8c, 0xca, 0xcd, 0x36, 0x58, 0xc8, 0xd6, 0xab, 0xbc, 0xef, 0xad, 0xed, 0x27,
	0xda, 0x2f, 0x14, 0xf9, 0x73, 0xef, 0xc3, 0xcc, 0x5d, 0x58, 0xad, 0x12, 0xe2, 0x26, 0x7c, 0x3b,
	0xf2, 0x2b, 0xab, 0xde, 0x64, 0xfe, 0x4a, 0xde, 0xeb, 0x9e, 0xa0, 0x90, 0x79, 0x37, 0x68, 0x63,
	0x68, 0x2a, 0xc4, 0x4e, 0xd4, 0xdb, 0x26, 0x9d, 0xf0, 0x20, 0xcf, 0x3f, 0x74, 0xd0, 0xc5, 0xd9,
	0x4e, 0xd4, 0x17, 0xc7, 0x5b, 0xb5, 0x56, 0x54, 0xaa, 0xa8, 0x77, 0x3d, 0x31, 0x35, 0x8b, 0x73,
	0xfc, 0x11, 0x32, 0x3b, 0x31, 0xb6, 0x8c, 0xf0, 0x24, 0xf3, 0x13, 0xe3, 0x34, 0xfa, 0x01, 0xae,
	0x54, 0x6c, 0xc7, 0x58, 0x79, 0x97, 0x40, 0x34, 0x1a, 0xf2, 0xce, 0x1a, 0x4f, 0xd5, 0x06, 0x5e,
	0xe4, 0x75, 0x1b, 0x66, 0xd2, 0x5f, 0xa3, 0xe9, 0xff, 0xb1, 0xaf, 0xc5, 0x41, 0xc0, 0xb3, 0xdc,
	0xb6, 0x8c, 0xbe, 0x9b, 0x47, 0x24, 0xb8, 0x49, 0x6e, 0x44, 0x2e, 0x8c, 0xd6, 0x94, 0x7f, 0x9f,
	0xac, 0x36, 0x07, 0x81, 0xd9, 0xf2, 0xa7, 0xc7, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0d, 0x14,
	0x96, 0x36, 0x5f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PubSubClient is the client API for PubSub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PubSubClient interface {
	// Send a message
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishResponse, error)
	// Send a stream of messages
	StreamingPublish(ctx context.Context, opts ...grpc.CallOption) (PubSub_StreamingPublishClient, error)
	// Subscribe to messages on a channel
	Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (PubSub_SubscribeClient, error)
}

type pubSubClient struct {
	cc *grpc.ClientConn
}

func NewPubSubClient(cc *grpc.ClientConn) PubSubClient {
	return &pubSubClient{cc}
}

func (c *pubSubClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/pubnub.PubSub/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pubSubClient) StreamingPublish(ctx context.Context, opts ...grpc.CallOption) (PubSub_StreamingPublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSub_serviceDesc.Streams[0], "/pubnub.PubSub/StreamingPublish", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubStreamingPublishClient{stream}
	return x, nil
}

type PubSub_StreamingPublishClient interface {
	Send(*Message) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type pubSubStreamingPublishClient struct {
	grpc.ClientStream
}

func (x *pubSubStreamingPublishClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pubSubStreamingPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pubSubClient) Subscribe(ctx context.Context, in *Subscription, opts ...grpc.CallOption) (PubSub_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PubSub_serviceDesc.Streams[1], "/pubnub.PubSub/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &pubSubSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PubSub_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type pubSubSubscribeClient struct {
	grpc.ClientStream
}

func (x *pubSubSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PubSubServer is the server API for PubSub service.
type PubSubServer interface {
	// Send a message
	Publish(context.Context, *Message) (*PublishResponse, error)
	// Send a stream of messages
	StreamingPublish(PubSub_StreamingPublishServer) error
	// Subscribe to messages on a channel
	Subscribe(*Subscription, PubSub_SubscribeServer) error
}

// UnimplementedPubSubServer can be embedded to have forward compatible implementations.
type UnimplementedPubSubServer struct {
}

func (*UnimplementedPubSubServer) Publish(ctx context.Context, req *Message) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedPubSubServer) StreamingPublish(srv PubSub_StreamingPublishServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingPublish not implemented")
}
func (*UnimplementedPubSubServer) Subscribe(req *Subscription, srv PubSub_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterPubSubServer(s *grpc.Server, srv PubSubServer) {
	s.RegisterService(&_PubSub_serviceDesc, srv)
}

func _PubSub_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubSubServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pubnub.PubSub/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubSubServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _PubSub_StreamingPublish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PubSubServer).StreamingPublish(&pubSubStreamingPublishServer{stream})
}

type PubSub_StreamingPublishServer interface {
	Send(*PublishResponse) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type pubSubStreamingPublishServer struct {
	grpc.ServerStream
}

func (x *pubSubStreamingPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pubSubStreamingPublishServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PubSub_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Subscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PubSubServer).Subscribe(m, &pubSubSubscribeServer{stream})
}

type PubSub_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type pubSubSubscribeServer struct {
	grpc.ServerStream
}

func (x *pubSubSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _PubSub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubnub.PubSub",
	HandlerType: (*PubSubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _PubSub_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingPublish",
			Handler:       _PubSub_StreamingPublish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _PubSub_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pubnub.proto",
}
